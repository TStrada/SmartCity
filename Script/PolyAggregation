{"cells":[{"cell_type":"markdown","metadata":{"id":"-gKOPRYUi5XH"},"source":["# Connect to drive folder"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":17010,"status":"ok","timestamp":1686494271572,"user":{"displayName":"Tommaso Strada","userId":"07272469469703036442"},"user_tz":-120},"id":"9jQRNFjwTuFb","outputId":"237515d4-e9d2-46a2-bfa2-e71de41585a0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}],"source":["from google.colab import drive\n","drive.mount(\"/content/gdrive\")"]},{"cell_type":"markdown","metadata":{"id":"--q5UbQ0jCoI"},"source":["# Install libraries"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RIac-R7YhEvG"},"outputs":[],"source":["%%capture\n","!pip install osmnx polars pyshp geofeather sympy\n","#!pip uninstall largestinteriorrectangle\n","!pip install largestinteriorrectangle \n","#pyshp --> Python Shapefile Library (PyShp)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OHQwXxaYja-Q"},"outputs":[],"source":["# Data management\n","import pandas as pd\n","import datetime\n","import numpy as np\n","import polars as pl\n","import zipfile, io\n","import os\n","import numpy as np\n","import re\n","import functools\n","import urllib\n","import shutil\n","import warnings\n","from collections import Counter\n","import progressbar\n","from time import sleep\n","\n","warnings.simplefilter(\"ignore\")\n","warnings.filterwarnings('ignore')\n","\n","from shapely.geometry import Point, Polygon, MultiPoint, MultiPolygon\n","from operator import itemgetter\n","import folium\n","from shapely.ops import unary_union\n","from shapely import wkt\n","from pyproj import Geod\n","\n","\n","# Geospatial libraries\n","import osmnx as ox\n","import shapefile as shp\n","import geopandas as gpd\n","import geofeather\n","import pyproj\n","import cv2 as cv # --> per largestinteriorrectangle   \n","\n","ox.config(log_console=True, use_cache=True)\n","\n","\n","# Plot\n","import matplotlib.pyplot as plt\n","import seaborn as sns"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1686494291947,"user":{"displayName":"Tommaso Strada","userId":"07272469469703036442"},"user_tz":-120},"id":"hMHzRUsAkLBD","outputId":"20cc44a5-61a7-4b72-f42d-5eb97aaaf6fe"},"outputs":[{"output_type":"stream","name":"stdout","text":["0.13.2\n"]}],"source":["print(gpd.__version__)"]},{"cell_type":"markdown","metadata":{"id":"eMdgKh-wERbh"},"source":["# Poly aggregation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OEyA1Hgusa5O"},"outputs":[],"source":["# poligono più grande che include tutti i punti di un'area raggiungibile a piedi o in bici\n","def finLargestPoly_Edifici(hubw): \n","  listPoints = hubw.geometry\n","  poly = MultiPoint(listPoints).convex_hull\n","  return poly\n","\n","# numero di ristoranti dato un poligono\n","def rest_count(poly):\n","  tags = {'amenity': ['restaurant']}\n","  rest = ox.geometries.geometries_from_polygon(poly, tags=tags)\n","  return len(rest)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"drHA6OzqJHL4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686494728727,"user_tz":-120,"elapsed":391321,"user":{"displayName":"Tommaso Strada","userId":"07272469469703036442"}},"outputId":"e2dcf52e-5c22-4576-c42c-82a16c252d86"},"outputs":[{"output_type":"stream","name":"stderr","text":["<frozen importlib._bootstrap>:914: ImportWarning: APICoreClientInfoImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _PyDriveImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _OpenCVImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _BokehImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _AltairImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: APICoreClientInfoImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _PyDriveImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _OpenCVImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _BokehImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _AltairImportHook.find_spec() not found; falling back to find_module()\n"]}],"source":["# funzione che prende tutti i 10 hub con le varie distanze e metti in un unico dataset ordinato per area hub (discendente)\n","def area_info(type_area, mode):\n","    \n","    db = pd.DataFrame()\n","\n","    poly_dict = {}\n","    info = {}\n","\n","    for i in range(10):\n","        hub = gpd.read_file(f'/content/gdrive/MyDrive/Project Lab Smart Cities/DATI/FINAL/{type_area}/15Min_gdf_{mode}/15Min_{i}/15Min_{i}.shp')\n","        test_points = hub.geometry.tolist()\n","\n","# trova il poligono (che racchiude l'area raggiungibile in 15 min) più grande che include tutti i punti.\n","        polygon_geom = finLargestPoly_Edifici(hub)\n","\n","        poly_dict[i] = [polygon_geom]\n","        \n","        rc = rest_count(polygon_geom)\n","        bc = len(hub)\n","\n","        info[i] = [bc, rc]\n","\n","    if type_area != 'renovation':\n","      df = pd.read_csv(f'/content/gdrive/MyDrive/Project Lab Smart Cities/DATI/FINAL/{type_area}/{type_area}RECTA.csv', index_col=0)\n","      df[\"final_geometry_rectangular\"] = gpd.GeoSeries.from_wkt(df[\"final_geometry_rectangular\"])\n","      df[\"geometry_newArea\"] = gpd.GeoSeries.from_wkt(df[\"geometry_newArea\"])\n","      df = df.sort_values(by='final_area_rectangular', ascending = False).head(10)\n","\n","      # specify a named ellipsoid\n","      geod = Geod(ellps=\"WGS84\")\n","\n","      df['final_area'] = df[\"final_geometry_rectangular\"].apply(lambda x: abs(geod.geometry_area_perimeter(x)[0]))\n","      df[\"centroid\"] = df[\"geometry_newArea\"].apply(lambda x: x.centroid)\n","      db['final_geometry_rectangular'] = df['final_geometry_rectangular']\n","      db['geometry_newArea'] = df['geometry_newArea']\n","      db['centroid'] = df['centroid']\n","      db['final_area'] = df['final_area']\n","      db['poly_geom'] = [poly_dict[i][0] for i in range(10)]\n","      db['poly_area'] = [abs(geod.geometry_area_perimeter(poly_dict[i][0])[0]) for i in range(10)]\n","\n","      db['N_residences'] = [info[i][0] for i in range(10)]\n","      db['N_restaurants'] = [info[i][1] for i in range(10)]\n","      db['Food_waste(kg/d)'] = [info[i][1]*50 for i in range(10)]\n","      db['Workers'] = round(db['final_area']*(23/8000), 0)\n","\n","      db['Covering_index_tradF'] = (db['final_area']*5/365)/(28*db['N_residences']*0.211)\n","      db['Covering_index_VF(LI)'] = (db['final_area']*90/365)/(28*db['N_residences']*0.211)\n","      db['Covering_index_VF(HI)'] = (db['final_area']*110/365)/(28*db['N_residences']*0.211)\n","      \n","      db = db.sort_values(by='poly_area', ascending = False).reset_index()\n","      db.to_csv(f'/content/gdrive/MyDrive/Project Lab Smart Cities/DATI/FINAL/{type_area}/{type_area}_{mode}.csv')\n","\n","    \n","    else:\n","      df = pd.read_csv(f'/content/gdrive/MyDrive/Project Lab Smart Cities/DATI/FINAL/{type_area}/{type_area}_complete.csv', index_col=0)\n","      df.geometry = gpd.GeoSeries.from_wkt(df.geometry)\n","      df = df.sort_values(by='area', ascending = False).head(10)\n","  \n","      # specify a named ellipsoid\n","      geod = Geod(ellps=\"WGS84\")\n","\n","      db['final_area'] = df[\"area\"]       #somma aree dei singoli hub\n","      # db[\"centroid\"] = df.geometry.apply(lambda x: x.centroid)\n","      db[\"centroid\"] = df.geometry\n","      db['poly_geom'] = [poly_dict[i][0] for i in range(10)]\n","      db['poly_area'] = [abs(geod.geometry_area_perimeter(poly_dict[i][0])[0]) for i in range(10)]  #access area\n","\n","\n","      db['multiPoly'] = df['buildings_geometry']   #questi sono gli hub da plottare\n","\n","      db['N_residences'] = [info[i][0] for i in range(10)]\n","      db['N_restaurants'] = [info[i][1] for i in range(10)]\n","      db['Food_waste(kg/d)'] = [info[i][1]*50 for i in range(10)]\n","\n","      db['Workers'] = round(db['final_area']*(23/8000), 0)\n","\n","      db['Covering_index_tradF'] = (db['final_area']*5/365)/(28*db['N_residences']*0.211)\n","      db['Covering_index_VF(LI)'] = (db['final_area']*90/365)/(28*db['N_residences']*0.211)\n","      db['Covering_index_VF(HI)'] = (db['final_area']*110/365)/(28*db['N_residences']*0.211)\n","    \n","      \n","      db = db.sort_values(by='poly_area', ascending = False).reset_index()\n","\n","      db.to_csv(f'/content/gdrive/MyDrive/Project Lab Smart Cities/DATI/FINAL/{type_area}/{type_area}_{mode}.csv')\n","\n","    return db\n","\n","nanbw = area_info('new_area_new_building', 'walk')\n","nanbb = area_info('new_area_new_building', 'bike')\n","nbw = area_info('new_building', 'walk')\n","nbb = area_info('new_building', 'bike')\n","rw = area_info('renovation', 'walk')\n","rb = area_info('renovation', 'bike')\n"]},{"cell_type":"code","source":["rw"],"metadata":{"id":"nql2wl1GuSXo","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686494728729,"user_tz":-120,"elapsed":25,"user":{"displayName":"Tommaso Strada","userId":"07272469469703036442"}},"outputId":"18479ad4-5139-4501-adac-2a070b12ad41"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n","<frozen importlib._bootstrap>:914: ImportWarning: APICoreClientInfoImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _PyDriveImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _OpenCVImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _BokehImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _AltairImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: APICoreClientInfoImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _PyDriveImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _OpenCVImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _BokehImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _AltairImportHook.find_spec() not found; falling back to find_module()\n"]},{"output_type":"execute_result","data":{"text/plain":["   index   final_area                  centroid  \\\n","0     18  6555.309893  POINT (9.21011 45.46190)   \n","1     64  6217.018391  POINT (9.11696 45.51892)   \n","2     40  8841.130321  POINT (9.21826 45.46145)   \n","3      4  7282.448737  POINT (9.16185 45.50644)   \n","4     47  6317.904247  POINT (9.22041 45.51568)   \n","5     11  7678.872935  POINT (9.23727 45.44313)   \n","6     39  6649.656310  POINT (9.16041 45.50609)   \n","7    105  6080.574824  POINT (9.24282 45.48304)   \n","8     99  8671.011172  POINT (9.24292 45.47414)   \n","9     55  7557.520507  POINT (9.24253 45.47608)   \n","\n","                                           poly_geom     poly_area  \\\n","0  POLYGON ((9.2132135 45.448248, 9.2082743 45.44...  6.350653e+06   \n","1  POLYGON ((9.1039844 45.5053774, 9.1035328 45.5...  6.260016e+06   \n","2  POLYGON ((9.2103953 45.4478057, 9.2079566 45.4...  6.233648e+06   \n","3  POLYGON ((9.1591235 45.4928104, 9.1572658 45.4...  6.205804e+06   \n","4  POLYGON ((9.211593 45.5020164, 9.2095912 45.50...  6.205371e+06   \n","5  POLYGON ((9.2261412 45.4295208, 9.2240865 45.4...  6.195191e+06   \n","6  POLYGON ((9.1517954 45.4924305, 9.1473493 45.4...  6.156282e+06   \n","7  POLYGON ((9.241743 45.4693893, 9.2354022 45.46...  6.144914e+06   \n","8  POLYGON ((9.2365117 45.4604912, 9.2301352 45.4...  5.859196e+06   \n","9  POLYGON ((9.2324213 45.4624738, 9.2300805 45.4...  5.524463e+06   \n","\n","                                           multiPoly  N_residences  \\\n","0  /content/gdrive/MyDrive/Project Lab Smart Citi...          4327   \n","1  /content/gdrive/MyDrive/Project Lab Smart Citi...           925   \n","2  /content/gdrive/MyDrive/Project Lab Smart Citi...          3937   \n","3  /content/gdrive/MyDrive/Project Lab Smart Citi...          2245   \n","4  /content/gdrive/MyDrive/Project Lab Smart Citi...          2341   \n","5  /content/gdrive/MyDrive/Project Lab Smart Citi...          1588   \n","6  /content/gdrive/MyDrive/Project Lab Smart Citi...          2199   \n","7  /content/gdrive/MyDrive/Project Lab Smart Citi...          2114   \n","8  /content/gdrive/MyDrive/Project Lab Smart Citi...          2132   \n","9  /content/gdrive/MyDrive/Project Lab Smart Citi...          2107   \n","\n","   N_restaurants  Food_waste(kg/d)  Workers  Covering_index_tradF  \\\n","0            226             11300     19.0              0.003513   \n","1             10               500     18.0              0.015584   \n","2            193              9650     25.0              0.005207   \n","3             51              2550     21.0              0.007521   \n","4             76              3800     18.0              0.006258   \n","5             39              1950     22.0              0.011212   \n","6             48              2400     19.0              0.007011   \n","7             61              3050     17.0              0.006669   \n","8             61              3050     25.0              0.009430   \n","9             63              3150     22.0              0.008317   \n","\n","   Covering_index_VF(LI)  Covering_index_VF(HI)  \n","0               0.063229               0.077280  \n","1               0.280511               0.342847  \n","2               0.093724               0.114552  \n","3               0.135385               0.165470  \n","4               0.112637               0.137667  \n","5               0.201816               0.246664  \n","6               0.126207               0.154253  \n","7               0.120046               0.146723  \n","8               0.169743               0.207464  \n","9               0.149701               0.182968  "],"text/html":["\n","  <div id=\"df-ca606bcb-827f-4de7-a22e-e0896fafd86f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>index</th>\n","      <th>final_area</th>\n","      <th>centroid</th>\n","      <th>poly_geom</th>\n","      <th>poly_area</th>\n","      <th>multiPoly</th>\n","      <th>N_residences</th>\n","      <th>N_restaurants</th>\n","      <th>Food_waste(kg/d)</th>\n","      <th>Workers</th>\n","      <th>Covering_index_tradF</th>\n","      <th>Covering_index_VF(LI)</th>\n","      <th>Covering_index_VF(HI)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>18</td>\n","      <td>6555.309893</td>\n","      <td>POINT (9.21011 45.46190)</td>\n","      <td>POLYGON ((9.2132135 45.448248, 9.2082743 45.44...</td>\n","      <td>6.350653e+06</td>\n","      <td>/content/gdrive/MyDrive/Project Lab Smart Citi...</td>\n","      <td>4327</td>\n","      <td>226</td>\n","      <td>11300</td>\n","      <td>19.0</td>\n","      <td>0.003513</td>\n","      <td>0.063229</td>\n","      <td>0.077280</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>64</td>\n","      <td>6217.018391</td>\n","      <td>POINT (9.11696 45.51892)</td>\n","      <td>POLYGON ((9.1039844 45.5053774, 9.1035328 45.5...</td>\n","      <td>6.260016e+06</td>\n","      <td>/content/gdrive/MyDrive/Project Lab Smart Citi...</td>\n","      <td>925</td>\n","      <td>10</td>\n","      <td>500</td>\n","      <td>18.0</td>\n","      <td>0.015584</td>\n","      <td>0.280511</td>\n","      <td>0.342847</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>40</td>\n","      <td>8841.130321</td>\n","      <td>POINT (9.21826 45.46145)</td>\n","      <td>POLYGON ((9.2103953 45.4478057, 9.2079566 45.4...</td>\n","      <td>6.233648e+06</td>\n","      <td>/content/gdrive/MyDrive/Project Lab Smart Citi...</td>\n","      <td>3937</td>\n","      <td>193</td>\n","      <td>9650</td>\n","      <td>25.0</td>\n","      <td>0.005207</td>\n","      <td>0.093724</td>\n","      <td>0.114552</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>7282.448737</td>\n","      <td>POINT (9.16185 45.50644)</td>\n","      <td>POLYGON ((9.1591235 45.4928104, 9.1572658 45.4...</td>\n","      <td>6.205804e+06</td>\n","      <td>/content/gdrive/MyDrive/Project Lab Smart Citi...</td>\n","      <td>2245</td>\n","      <td>51</td>\n","      <td>2550</td>\n","      <td>21.0</td>\n","      <td>0.007521</td>\n","      <td>0.135385</td>\n","      <td>0.165470</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>47</td>\n","      <td>6317.904247</td>\n","      <td>POINT (9.22041 45.51568)</td>\n","      <td>POLYGON ((9.211593 45.5020164, 9.2095912 45.50...</td>\n","      <td>6.205371e+06</td>\n","      <td>/content/gdrive/MyDrive/Project Lab Smart Citi...</td>\n","      <td>2341</td>\n","      <td>76</td>\n","      <td>3800</td>\n","      <td>18.0</td>\n","      <td>0.006258</td>\n","      <td>0.112637</td>\n","      <td>0.137667</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>11</td>\n","      <td>7678.872935</td>\n","      <td>POINT (9.23727 45.44313)</td>\n","      <td>POLYGON ((9.2261412 45.4295208, 9.2240865 45.4...</td>\n","      <td>6.195191e+06</td>\n","      <td>/content/gdrive/MyDrive/Project Lab Smart Citi...</td>\n","      <td>1588</td>\n","      <td>39</td>\n","      <td>1950</td>\n","      <td>22.0</td>\n","      <td>0.011212</td>\n","      <td>0.201816</td>\n","      <td>0.246664</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>39</td>\n","      <td>6649.656310</td>\n","      <td>POINT (9.16041 45.50609)</td>\n","      <td>POLYGON ((9.1517954 45.4924305, 9.1473493 45.4...</td>\n","      <td>6.156282e+06</td>\n","      <td>/content/gdrive/MyDrive/Project Lab Smart Citi...</td>\n","      <td>2199</td>\n","      <td>48</td>\n","      <td>2400</td>\n","      <td>19.0</td>\n","      <td>0.007011</td>\n","      <td>0.126207</td>\n","      <td>0.154253</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>105</td>\n","      <td>6080.574824</td>\n","      <td>POINT (9.24282 45.48304)</td>\n","      <td>POLYGON ((9.241743 45.4693893, 9.2354022 45.46...</td>\n","      <td>6.144914e+06</td>\n","      <td>/content/gdrive/MyDrive/Project Lab Smart Citi...</td>\n","      <td>2114</td>\n","      <td>61</td>\n","      <td>3050</td>\n","      <td>17.0</td>\n","      <td>0.006669</td>\n","      <td>0.120046</td>\n","      <td>0.146723</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>99</td>\n","      <td>8671.011172</td>\n","      <td>POINT (9.24292 45.47414)</td>\n","      <td>POLYGON ((9.2365117 45.4604912, 9.2301352 45.4...</td>\n","      <td>5.859196e+06</td>\n","      <td>/content/gdrive/MyDrive/Project Lab Smart Citi...</td>\n","      <td>2132</td>\n","      <td>61</td>\n","      <td>3050</td>\n","      <td>25.0</td>\n","      <td>0.009430</td>\n","      <td>0.169743</td>\n","      <td>0.207464</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>55</td>\n","      <td>7557.520507</td>\n","      <td>POINT (9.24253 45.47608)</td>\n","      <td>POLYGON ((9.2324213 45.4624738, 9.2300805 45.4...</td>\n","      <td>5.524463e+06</td>\n","      <td>/content/gdrive/MyDrive/Project Lab Smart Citi...</td>\n","      <td>2107</td>\n","      <td>63</td>\n","      <td>3150</td>\n","      <td>22.0</td>\n","      <td>0.008317</td>\n","      <td>0.149701</td>\n","      <td>0.182968</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ca606bcb-827f-4de7-a22e-e0896fafd86f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ca606bcb-827f-4de7-a22e-e0896fafd86f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ca606bcb-827f-4de7-a22e-e0896fafd86f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"K2VnbFfwCn8g"},"source":["# Milan dbt"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KfjXSz7nCtJZ"},"outputs":[],"source":["datasets = {}\n","project_path = '/content/gdrive/MyDrive/Project Lab Smart Cities'\n","\n","def get_geofeather_Files(subFolder_name):\n","  focus = subFolder_name\n","  if os.getcwd() != os.path.join(project_path, f'DATI/COMPLETE/{focus}/Geofeather'): \n","    os.chdir(os.path.join(project_path, f'DATI/COMPLETE/{focus}/Geofeather'))\n","\n","  datasets[focus] = []\n","\n","  for ext in os.listdir(os.getcwd()):\n","    try:\n","      datasets[focus].append(geofeather.from_geofeather(ext))   #get all files in the folder Geofeather, in order to print all of them\n","    except:\n","      continue\n","  return datasets[focus]   #return a list of file open in geofeather format\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NimYSjq9Cq6F","executionInfo":{"status":"ok","timestamp":1686494820814,"user_tz":-120,"elapsed":92092,"user":{"displayName":"Tommaso Strada","userId":"07272469469703036442"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"9a9b0306-f64e-4bc5-bfca-a4209bb12d8f"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/geofeather/core.py:68: UserWarning: base_dbt_per_pianificazione.crs.crs coordinate reference system file is missing. No crs will be set for this GeoDataFrame.\n","  warnings.warn(\n","<frozen importlib._bootstrap>:914: ImportWarning: APICoreClientInfoImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _PyDriveImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _OpenCVImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _BokehImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _AltairImportHook.find_spec() not found; falling back to find_module()\n","/usr/local/lib/python3.10/dist-packages/geofeather/core.py:62: ResourceWarning: unclosed file <_io.TextIOWrapper name='base_dbt_per_pianificazione.crs' mode='r' encoding='UTF-8'>\n","  crs = json.loads(open(crsfilename).read())\n","ResourceWarning: Enable tracemalloc to get the object allocation traceback\n","/usr/local/lib/python3.10/dist-packages/geofeather/core.py:68: UserWarning: dbgt.crs.crs coordinate reference system file is missing. No crs will be set for this GeoDataFrame.\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/geofeather/core.py:62: ResourceWarning: unclosed file <_io.TextIOWrapper name='dbgt.crs' mode='r' encoding='UTF-8'>\n","  crs = json.loads(open(crsfilename).read())\n","ResourceWarning: Enable tracemalloc to get the object allocation traceback\n","/usr/local/lib/python3.10/dist-packages/geofeather/core.py:68: UserWarning: cache.crs coordinate reference system file is missing. No crs will be set for this GeoDataFrame.\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/geofeather/core.py:68: UserWarning: content.crs coordinate reference system file is missing. No crs will be set for this GeoDataFrame.\n","  warnings.warn(\n"]}],"source":["milano_shape_dbt = gpd.GeoDataFrame(get_geofeather_Files(\"MILANO\")[0])\n","milano_shape_dbt = milano_shape_dbt.to_crs(\"EPSG:4326\")\n","\n","milano_shape_dbt[[\"codice_strato_tema\", \"classe\" ]] = milano_shape_dbt[\"codice_classe\"].apply(lambda x : pd.Series(str(x).split(\"_\", maxsplit=1)))\n","\n","milano_SoloInsediativo = milano_shape_dbt[(milano_shape_dbt[\"classe\"] == \"EDIFC\") & (milano_shape_dbt[\"destinazione_indicativa\"] == \"Insedativo\")]\n","\n","milano_SoloInsediativo = gpd.GeoDataFrame(milano_SoloInsediativo).explode(index_parts = False)\n","\n","milano_SoloInsediativo.reset_index(inplace = True)\n"]},{"cell_type":"markdown","metadata":{"id":"JMlVnEHnBGQe"},"source":["# Join polygon shape and create indexes"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":788},"id":"mzFtARxDPTuv","executionInfo":{"status":"ok","timestamp":1686494872227,"user_tz":-120,"elapsed":46901,"user":{"displayName":"Tommaso Strada","userId":"07272469469703036442"}},"outputId":"8a2f399c-d6d7-4723-ba40-c8deecef3033"},"outputs":[{"output_type":"stream","name":"stdout","text":["Aggregation: Renovation walk\n"]},{"output_type":"stream","name":"stderr","text":["<frozen importlib._bootstrap>:914: ImportWarning: APICoreClientInfoImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _PyDriveImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _OpenCVImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _BokehImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _AltairImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: APICoreClientInfoImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _PyDriveImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _OpenCVImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _BokehImportHook.find_spec() not found; falling back to find_module()\n","<frozen importlib._bootstrap>:914: ImportWarning: _AltairImportHook.find_spec() not found; falling back to find_module()\n"]},{"output_type":"display_data","data":{"text/plain":["      hub_id_included                                     polygon_merged  \\\n","0  [2, 0, 5, 7, 8, 9]  POLYGON ((9.223897009347343 45.4480917448189, ...   \n","1                 [1]  POLYGON ((9.1035328 45.5069002, 9.103516817856...   \n","2              [6, 3]  POLYGON ((9.1472149 45.4924815, 9.1470146 45.4...   \n","3                 [4]  POLYGON ((9.2095912 45.5021889, 9.2074749 45.5...   \n","\n","   N_hubs_included  total_area_attainable_rw_km2  N_residences  N_restaurants  \\\n","0                6                     21.940315          4800            358   \n","1                1                      3.792518           925             10   \n","2                2                      6.550811          1459             52   \n","3                1                      5.371288          2245             51   \n","\n","   Food_waste(kg/d)  Cover_index(T)  Cover_index(LI)  Cover_index(HI)  \\\n","0             17900        0.021923         0.394616         0.482308   \n","1               500        0.015584         0.280511         0.342847   \n","2              2600        0.022141         0.398539         0.487103   \n","3              2550        0.006525         0.117453         0.143554   \n","\n","   Area_Aggreated_hubs_m2  Total_workers  Total_population_feeding_HI  \\\n","0            45384.419652          130.0                      64822.0   \n","1             6217.018391           18.0                       8880.0   \n","2            13932.105047           40.0                      19899.0   \n","3             6317.904247           18.0                       9024.0   \n","\n","   Total_population_feeding_LI  \n","0                      53036.0  \n","1                       7265.0  \n","2                      16281.0  \n","3                       7383.0  "],"text/html":["\n","  <div id=\"df-6cb87506-5778-419d-8413-02fd77efb8b4\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>hub_id_included</th>\n","      <th>polygon_merged</th>\n","      <th>N_hubs_included</th>\n","      <th>total_area_attainable_rw_km2</th>\n","      <th>N_residences</th>\n","      <th>N_restaurants</th>\n","      <th>Food_waste(kg/d)</th>\n","      <th>Cover_index(T)</th>\n","      <th>Cover_index(LI)</th>\n","      <th>Cover_index(HI)</th>\n","      <th>Area_Aggreated_hubs_m2</th>\n","      <th>Total_workers</th>\n","      <th>Total_population_feeding_HI</th>\n","      <th>Total_population_feeding_LI</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>[2, 0, 5, 7, 8, 9]</td>\n","      <td>POLYGON ((9.223897009347343 45.4480917448189, ...</td>\n","      <td>6</td>\n","      <td>21.940315</td>\n","      <td>4800</td>\n","      <td>358</td>\n","      <td>17900</td>\n","      <td>0.021923</td>\n","      <td>0.394616</td>\n","      <td>0.482308</td>\n","      <td>45384.419652</td>\n","      <td>130.0</td>\n","      <td>64822.0</td>\n","      <td>53036.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>[1]</td>\n","      <td>POLYGON ((9.1035328 45.5069002, 9.103516817856...</td>\n","      <td>1</td>\n","      <td>3.792518</td>\n","      <td>925</td>\n","      <td>10</td>\n","      <td>500</td>\n","      <td>0.015584</td>\n","      <td>0.280511</td>\n","      <td>0.342847</td>\n","      <td>6217.018391</td>\n","      <td>18.0</td>\n","      <td>8880.0</td>\n","      <td>7265.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>[6, 3]</td>\n","      <td>POLYGON ((9.1472149 45.4924815, 9.1470146 45.4...</td>\n","      <td>2</td>\n","      <td>6.550811</td>\n","      <td>1459</td>\n","      <td>52</td>\n","      <td>2600</td>\n","      <td>0.022141</td>\n","      <td>0.398539</td>\n","      <td>0.487103</td>\n","      <td>13932.105047</td>\n","      <td>40.0</td>\n","      <td>19899.0</td>\n","      <td>16281.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>[4]</td>\n","      <td>POLYGON ((9.2095912 45.5021889, 9.2074749 45.5...</td>\n","      <td>1</td>\n","      <td>5.371288</td>\n","      <td>2245</td>\n","      <td>51</td>\n","      <td>2550</td>\n","      <td>0.006525</td>\n","      <td>0.117453</td>\n","      <td>0.143554</td>\n","      <td>6317.904247</td>\n","      <td>18.0</td>\n","      <td>9024.0</td>\n","      <td>7383.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6cb87506-5778-419d-8413-02fd77efb8b4')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-6cb87506-5778-419d-8413-02fd77efb8b4 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-6cb87506-5778-419d-8413-02fd77efb8b4');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Aggregation: Renovation bike\n"]},{"output_type":"display_data","data":{"text/plain":["                  hub_id_included  \\\n","0  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]   \n","\n","                                      polygon_merged  N_hubs_included  \\\n","0  POLYGON ((9.2056587 45.3980458, 9.1986919 45.4...               10   \n","\n","   total_area_attainable_rb_km2  N_residences  Cover_index(T)  \\\n","0                    142.261937         26939        0.006184   \n","\n","   Cover_index(LI)  Cover_index(HI)  Area_Aggreated_hubs_m2  Total_workers  \\\n","0         0.111317         0.136055            71851.447338          207.0   \n","\n","   Total_population_feeding_HI  Total_population_feeding_LI  \n","0                     102625.0                      83966.0  "],"text/html":["\n","  <div id=\"df-279e7365-05bd-44de-9876-33b4017ac9b6\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>hub_id_included</th>\n","      <th>polygon_merged</th>\n","      <th>N_hubs_included</th>\n","      <th>total_area_attainable_rb_km2</th>\n","      <th>N_residences</th>\n","      <th>Cover_index(T)</th>\n","      <th>Cover_index(LI)</th>\n","      <th>Cover_index(HI)</th>\n","      <th>Area_Aggreated_hubs_m2</th>\n","      <th>Total_workers</th>\n","      <th>Total_population_feeding_HI</th>\n","      <th>Total_population_feeding_LI</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]</td>\n","      <td>POLYGON ((9.2056587 45.3980458, 9.1986919 45.4...</td>\n","      <td>10</td>\n","      <td>142.261937</td>\n","      <td>26939</td>\n","      <td>0.006184</td>\n","      <td>0.111317</td>\n","      <td>0.136055</td>\n","      <td>71851.447338</td>\n","      <td>207.0</td>\n","      <td>102625.0</td>\n","      <td>83966.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-279e7365-05bd-44de-9876-33b4017ac9b6')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-279e7365-05bd-44de-9876-33b4017ac9b6 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-279e7365-05bd-44de-9876-33b4017ac9b6');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}}],"source":["from shapely import geometry\n","def poly_union_f(dataset, name, save):\n","  ci = gpd.read_file('/content/gdrive/MyDrive/Project Lab Smart Cities/DATI/Comune_Milano/Copia di Com01012022_WGS84.shp')\n","  ci = ci.to_crs(4326)\n","  cm = ci[ci['COMUNE']=='Milano']['geometry'].tolist()[0]\n","\n","  df = dataset.copy()\n","\n","  df_union = pd.DataFrame()\n","  poly_union_id = {}\n","\n","#crea un dizionario con chiave = hub start e value = lista di hub che interseziona\n","  for polygon in df.poly_geom:\n","    id_polygon = df[df.poly_geom == polygon].index[0]     #id POLYGON\n","    poly_union_id[id_polygon] = []\n","    others = [poly for poly in df.poly_geom if poly != polygon]\n","    for poly in others:\n","      id_other = df[df.poly_geom == poly].index[0]\n","      if polygon.intersects(poly):\n","        poly_union_id[id_polygon].append(id_other)\n","\n","  id_with_intersection = [key for key, value in poly_union_id.items()]\n","  poly_not_union = [df.iloc[i].poly_geom for i in range(10) if i not in id_with_intersection]\n","\n","# unisci i poligoni tramite id: aggrega solo se l'hub (key) e le sue intersezioni (value) non sono stati già uniti (id_used)\n","  id_used = []\n","  hub = {}\n","  hub_dio = {}\n","  item_joined = []\n","  for key, val in poly_union_id.items():\n","    hub[key] = []\n","    if (key not in id_used) and all(v not in id_used for v in val):\n","      poly_union = df.poly_geom.iloc[key]\n","      for item in val:\n","        id_used.append(item)\n","        hub[key].append(item)\n","        poly_union = unary_union([poly_union, df.poly_geom.iloc[item]])\n","      item_joined.append(poly_union)\n","      hub[key].append(key)\n","    else:\n","      hub_dio[key] = val \n","      continue\n","\n","# lista di poligoni uniti e quelli che non hanno intersezioni\n","  p = item_joined + poly_not_union\n","\n","  df_union['polygon_merged'] = p\n","  df_union['hub_id_included'] = [l for i, l in hub.items() if len(l) > 0]\n","\n","  \n","  for key, val in hub_dio.items():\n","    for row in range(len(df_union)):\n","      # ritorna una lista di boolean (True) se un id che ha intersezione non è stato mergiato \n","      a = [True for v in val if (key not in df_union.iloc[row]['hub_id_included']) and (v in df_union.iloc[row]['hub_id_included'])]\n","      if len(a) > 0:\n","        p_list = df_union['polygon_merged'].to_list()\n","        p_list[row] = unary_union([df_union.iloc[row]['polygon_merged'], df.poly_geom.iloc[key]])\n","        df_union['polygon_merged'] = p_list\n","        df_union.iloc[row]['hub_id_included'].append(key)\n","\n","  from sympy import Polygon\n","  a = []\n","\n","# Differenza con i confine di milano\n","  for row in range(len(df_union)):\n","    a.append(df_union.iloc[row]['polygon_merged'].intersection(cm))\n","\n","\n","\n","  df_union.drop(columns=['polygon_merged'], inplace = True)\n","  # print('Tipo', df_union.iloc[0]['polygon_merged'])\n","  df_union['polygon_merged'] = a\n","\n","  df_union['N_hubs_included'] =  df_union['hub_id_included'].apply(lambda x: len(x))\n","\n","  geod = Geod(ellps=\"WGS84\")\n","  df_union[f'total_area_attainable_{name}_km2'] = [abs(geod.geometry_area_perimeter(poly)[0])/1000000 for poly in df_union.polygon_merged]\n","\n","\n","  rc = [rest_count(df_union.iloc[p]['polygon_merged']) if df_union.iloc[p]['N_hubs_included'] > 1 else df.iloc[p]['N_restaurants'] for p in range(len(df_union)) ]\n","\n","  bc = [len(milano_SoloInsediativo[milano_SoloInsediativo.geometry.within(df_union.polygon_merged[i])]) if df_union.N_hubs_included[i] > 1 else df['N_residences'][i] for i,r in df_union.iterrows()]\n","  df_union['N_residences'] = bc\n","\n","  if 'w' in name:\n","    df_union['N_restaurants'] = rc\n","    df_union['Food_waste(kg/d)'] = [i*50 for i in rc]\n","   \n","  hub_area = {}\n","  hub_area_rossa = {}\n","  for l in df_union['hub_id_included']:\n","    hub_area[l[0]] = []\n","    for v in l:\n","      hub_area[l[0]].append(df.iloc[v]['final_area'])\n","\n","\n","\n","  hub_sum_area = []\n","\n","  for key, val in hub_area.items():\n","    hub_sum_area.append(sum(val))\n"," \n","\n","  df_union['Cover_index(T)'] = [(val[1]*5/365)/(28*df_union['N_residences'].iloc[val[0]]*0.211) for val in enumerate(hub_sum_area)]\n","  df_union['Cover_index(LI)'] = [(val[1]*90/365)/(28*df_union['N_residences'].iloc[val[0]]*0.211) for val in enumerate(hub_sum_area)]\n","  df_union['Cover_index(HI)'] = [(val[1]*110/365)/(28*df_union['N_residences'].iloc[val[0]]*0.211) for val in enumerate(hub_sum_area)]\n","\n","  pop_feedLI = [round((val*90/365)/(0.211), 0) for val in hub_sum_area]\n","  pop_feedHI = [round((val*110/365)/(0.211), 0) for val in hub_sum_area]\n","\n","\n","  df_union['Area_Aggreated_hubs_m2'] = hub_sum_area\n","  df_union['Total_workers'] = [round((23/8000)*(a), 0) for a in hub_sum_area]\n","  df_union['Total_population_feeding_HI'] = pop_feedHI\n","  df_union['Total_population_feeding_LI'] = pop_feedLI\n","\n","  # df_union['Area_rossa_somma'] = hub_sum_area_rossa\n","  if save:\n","    df_union.to_csv(f'/content/gdrive/MyDrive/Project Lab Smart Cities/DATI/FINAL/Aggregati/{name}.csv')\n","  \n","  return df_union\n","\n","print('Aggregation: New area new building walk')\n","display(poly_union_f(nanbw, 'nanbw', save = True))\n","print('Aggregation: New area new building bike')   \n","display(poly_union_f(nanbb, 'nanbb', save = True))               \n","print('Aggregation: New building walk')           \n","display(poly_union_f(nbw, 'nbw', save = True))\n","print('Aggregation: New building bike')\n","display(poly_union_f(nbb, 'nbb', save = True))\n","print('Aggregation: Renovation walk')        \n","display(poly_union_f(rw, 'rw', save = True))\n","print('Aggregation: Renovation bike')\n","display(poly_union_f(rb, 'rb', save = True))\n"]}],"metadata":{"colab":{"provenance":[],"collapsed_sections":["-gKOPRYUi5XH","eMdgKh-wERbh","K2VnbFfwCn8g","JMlVnEHnBGQe"],"toc_visible":true,"authorship_tag":"ABX9TyN0IQv7TGwYNqGtHrHDEPdC"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}